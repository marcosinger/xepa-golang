Golang
Segurança de liguagem tipada e diversão de linguagem dinâmica

Marco Singer
marco@loldesign.com.br
@mahsinger
http://github.com/marcosinger

* Quem somos?
.image images/lol_logo.jpg

* História
- Criada em Setembro/2007
- Robert Griesemer (V8), Rob Pike e Ken Thompson (UTF-8, Unix, B language, Plan 9)
- Open source em Novembro/2009
- Primeira release Março/2012

* Porque mais uma linguagem?
- unir o melhor dos mundos (tipagem estática e tipagem dinâmica)
- compilação eficiente, execução eficiente e fácil de se programar
- GC, paralelismo e concorrência sem sustos ou mágicas

* Quem está usando?

- Canonical
- Heroku
- Docker
- Soundcloud
- Google
- Loldesign :)

* Quem está usando?

.iframe http://golangprojects.com/golang-go-job-hq-Senior-SW-Backend/Devops-Engineer-Cupertino-Apple.html 768 1000

* Primeiros passos

* Começando a usar
.link http://golang.org/doc/install#install download (stable 1.2.2)
.link http://play.golang.org/

* Hello world
.play hello.go

* Funções
.play func.go /start func OMIT/,/end func OMIT/

* Error Handling

.play error_handling.go /start error_handling OMIT/,/end error_handling OMIT/

* Struct

Structs são basicamente coleções de campos

.code struct.go /start struct OMIT/,/end struct OMIT/ HLStruct

Várias maneiras de se iniciar um struct

.code struct.go /start struct apollo OMIT/,/end struct apollo OMIT/
.code struct.go /start struct rocky OMIT/,/end struct rocky OMIT/
.code struct.go /start struct yoda OMIT/,/end struct yoda OMIT/

* Struct (cont.)
.code struct.go /start struct OMIT/,/end struct OMIT/
.play struct.go /start print struct OMIT/,/end print struct OMIT/

* Métodos

Adicionando métodos aos struts

.code struct.go /start struct OMIT/,/end struct OMIT/
.code struct.go /start method OMIT/,/end method OMIT/
.play struct.go /start print method OMIT/,/end print method OMIT/

* Interface
Podemos fazer o mesmo, mas usando interfaces

.code interfaces.go /start interface OMIT/,/end interface OMIT/
.play interfaces.go /start print interface OMIT/,/end print interface OMIT/

* Interface (cont.)
Ou subir um servidor web

.code http.go

* Não para por ai

- Goroutines
- Channels
- Closures
- Slices
- Range


* Onde aprender mais
.link http://tour.golang.org/#1 Go Tour
.link http://golang.org/pkg/ Standard library
.link http://golang.org/doc/effective_go.html Effective Go
.link https://gobyexample.com Go by Example

* Comunidade
.link https://groups.google.com/forum/#!forum/golang-nuts Golang-nuts (en)
.link https://groups.google.com/forum/#!forum/golang-brasil Golang Brasil

.link https://twitter.com/golang
.link https://twitter.com/golangweekly
.link https://twitter.com/enneff Andrew Gerrand
.link https://twitter.com/bketelsen Brian Ketelsen
.link https://twitter.com/gniemeyer Gustavo Niemeyer
.link https://twitter.com/davecheney Dave Cheney
.link https://twitter.com/codegangsta Jeremy Saenz

* Mais referências, posts, livros e etc
.link https://code.google.com/p/go-wiki/wiki/Projects#Table_of_Contents
.link http://go-lang.cat-v.org
.link http://blog.golang.org/go-at-heroku
.link http://www.alexedwards.net/blog/a-recap-of-request-handling
.link https://leanpub.com/GoNotebook
.link http://dave.cheney.net/2014/06/07/five-things-that-make-go-fast
.link http://www.wired.com/2014/06/eric-brewer-google-docker/
